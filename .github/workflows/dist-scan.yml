name: dist scans
on:
  merge_group: {}
jobs:
  build-dist:
    runs-on: ${{ vars.LARGE_RUNNER_S || 'ubuntu-latest' }}
    permissions:
      id-token: write
      contents: read
    env:
      iam_role_to_assume: ${{ secrets.ROLE_ARN }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
      - name: Configure AWS Credentials
        if: ${{ env.iam_role_to_assume != '' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.iam_role_to_assume }}
          aws-region: us-east-1
      - name: Login to Amazon ECR Public
        if: ${{ env.iam_role_to_assume != '' }}
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public
      - name: Test build dist
        run: |-
          chmod +x ./deployment/test-build-dist-1.sh
          ./deployment/test-build-dist-1.sh
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: templates-${{ github.event.pull_request.number }}
          path: |
            deployment/global-s3-assets
            !deployment/global-s3-assets/**/asset.*
  cfn-lint-scan:
    name: cfn-lint scan
    needs: build-dist
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v3
        with:
          name: templates-${{ github.event.pull_request.number }}
          path: templates
      - name: Setup Cloud Formation Linter with Latest Version
        uses: scottbrenner/cfn-lint-action@v2
      - name: Print the Cloud Formation Linter Version & run Linter.
        id: cfn-lint
        run: |
          cfn-lint --version
          TEMPLATE_ROOT=templates/default
          cfn-lint -i W3005 W2001 W3045 -e -r us-east-1,ap-northeast-1 -t $TEMPLATE_ROOT/*.template.json
          cfn-lint -i W3005 W2001 W3045 -e -r ap-east-1 --ignore-templates $TEMPLATE_ROOT/data-reporting-quicksight-stack.template.json --ignore-templates $TEMPLATE_ROOT/*NewServerlessRedshift*.nested.template.json --ignore-templates $TEMPLATE_ROOT/data-pipeline-stack.template.json --ignore-templates $TEMPLATE_ROOT/datapipeline*.nested.template.json --ignore-templates $TEMPLATE_ROOT/cloudfront-s3-control-plane-stack-global* --ignore-templates $TEMPLATE_ROOT/*cognito-control-plane-stack.template.json --ignore-templates $TEMPLATE_ROOT/public-exist-vpc-custom-domain-control-plane-stack.template.json -t $TEMPLATE_ROOT/*.template.json
          TEMPLATE_ROOT=templates/cn
          cfn-lint -i W3005 W2001 W3045 -e -r cn-north-1,cn-northwest-1 --ignore-templates $TEMPLATE_ROOT/data-reporting-quicksight-stack.template.json --ignore-templates $TEMPLATE_ROOT/*NewServerlessRedshift*.nested.template.json --ignore-templates $TEMPLATE_ROOT/data-pipeline-stack.template.json --ignore-templates $TEMPLATE_ROOT/datapipeline*.nested.template.json --ignore-templates $TEMPLATE_ROOT/cloudfront-s3-control-plane-stack-global*.json --ignore-templates $TEMPLATE_ROOT/*cognito-control-plane-stack.template.json --ignore-templates $TEMPLATE_ROOT/public-exist-vpc-custom-domain-control-plane-stack.template.json --ignore-templates $TEMPLATE_ROOT/ingestionserver*.nested.template.json  -t $TEMPLATE_ROOT/*.template.json
  cfn-nag-scan:
    name: cfn-nag scan
    needs: build-dist
    runs-on: ubuntu-latest
    container:
      image: stelligent/cfn_nag
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v3
        with:
          name: templates-${{ github.event.pull_request.number }}
          path: templates
      - name: Run cfn-nag scan
        run: |
          set -xeuo pipefail
          cfn_nag -f -b .cfnnag_global_suppress_list templates/**/*.template.json
  post-build-scan:
    name: post-build scan
    needs: build-dist
    runs-on: ubuntu-latest
    env:
      SOLUTION_NAME: clickstream-analytics-on-aws
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
      - uses: actions/download-artifact@v3
        with:
          name: templates-${{ github.event.pull_request.number }}
          path: deployment/global-s3-assets
      - name: build package
        run: |
          cd deployment/
          ./build-open-source-dist.sh $SOLUTION_NAME
      - name: install dependencies
        run: |
          yarn install --check-files --frozen-lockfile
          npx projen
          yarn install --check-files --frozen-lockfile --cwd frontend 
      - name: Post-build scan
        env:
          VIPERLIGHT_SCAN_STRATEGY: Enforce
          VIPERLIGHT_PUBCHECK_STRATEGY: Monitor
        run: |-
          curl https://viperlight-scanner.s3.us-east-1.amazonaws.com/latest/.viperlightrc -o .viperlightrc
          curl https://viperlight-scanner.s3.us-east-1.amazonaws.com/latest/viperlight.zip -o viperlight.zip
          unzip -q viperlight.zip -d ../viperlight && rm viperlight.zip
          cp ../viperlight/scripts/*.sh .
          default_scan="./codescan-postbuild-default.sh"
          if [ -f "$default_scan" ]; then
            chmod +x $default_scan
          else
            default_scn="viperlight scan"
          fi
          custom_scancmd="./codescan-postbuild-custom.sh"
          if [ -f "$custom_scancmd" ]; then
            chmod +x $custom_scancmd
            $custom_scancmd
          else
            $default_scan
          fi
          # force check notice-js
          ../viperlight/bin/viperlight pubcheck -m notice-js
